
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CoolParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\006" +
    "\000\002\004\010\000\002\006\004\000\002\006\005\000" +
    "\002\005\003\000\002\005\004\000\002\007\006\000\002" +
    "\007\010\000\002\007\014\000\002\010\002\000\002\010" +
    "\003\000\002\010\005\000\002\011\005\000\002\012\005" +
    "\000\002\012\010\000\002\012\006\000\002\012\004\000" +
    "\002\012\011\000\002\012\007\000\002\012\005\000\002" +
    "\012\004\000\002\012\007\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\004\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\016\004\000\002\016\005" +
    "\000\002\014\003\000\002\014\005\000\002\017\010\000" +
    "\002\017\011\000\002\013\007\000\002\013\011\000\002" +
    "\013\007\000\002\013\011\000\002\015\004\000\002\015" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\003\006\004\007\001\002\000\006\002" +
    "\001\004\007\001\002\000\004\002\216\001\002\000\004" +
    "\002\uffff\001\002\000\004\055\011\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\006\011\013\050\012\001\002" +
    "\000\006\051\024\056\023\001\002\000\004\055\016\001" +
    "\002\000\004\043\015\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\050\012\001\002\000\004\043\020\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\006\051\ufff8" +
    "\056\ufff8\001\002\000\006\051\215\056\023\001\002\000" +
    "\006\044\025\045\026\001\002\000\004\043\ufffa\001\002" +
    "\000\004\055\207\001\002\000\010\042\ufff3\046\ufff3\056" +
    "\030\001\002\000\006\042\ufff2\046\ufff2\001\002\000\004" +
    "\044\205\001\002\000\006\042\032\046\033\001\002\000" +
    "\004\056\030\001\002\000\004\044\034\001\002\000\004" +
    "\055\035\001\002\000\004\050\036\001\002\000\036\007" +
    "\045\012\054\017\040\020\051\024\041\025\047\027\052" +
    "\041\053\045\055\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\036\007\045\012\054\017\040\020\051" +
    "\024\041\025\047\027\052\041\053\045\055\050\037\052" +
    "\043\053\042\054\044\056\050\001\002\000\036\007\045" +
    "\012\054\017\040\020\051\024\041\025\047\027\052\041" +
    "\053\045\055\050\037\052\043\053\042\054\044\056\050" +
    "\001\002\000\004\055\171\001\002\000\052\005\uffd9\006" +
    "\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022\uffd9\030\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\051\uffd9\001\002" +
    "\000\052\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\046\uffd8\047" +
    "\uffd8\051\uffd8\001\002\000\052\005\uffd7\006\uffd7\010\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\022\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7" +
    "\043\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\036\007" +
    "\045\012\054\017\040\020\051\024\041\025\047\027\052" +
    "\041\053\045\055\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\026\030\063\032\061\033\065\034\057" +
    "\035\060\036\062\037\070\040\064\047\067\051\161\001" +
    "\002\000\036\007\045\012\054\017\040\020\051\024\041" +
    "\025\047\027\052\041\053\045\055\050\037\052\043\053" +
    "\042\054\044\056\050\001\002\000\056\005\uffda\006\uffda" +
    "\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda\026\156\030" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\042\uffda\043\uffda\045\076\046\uffda\047\uffda\051" +
    "\uffda\001\002\000\036\007\045\012\054\017\040\020\051" +
    "\024\041\025\047\027\052\041\053\045\055\050\037\052" +
    "\043\053\042\054\044\056\050\001\002\000\036\007\045" +
    "\012\054\017\040\020\051\024\041\025\047\027\052\041" +
    "\053\045\055\050\037\052\043\053\042\054\044\056\050" +
    "\001\002\000\036\007\045\012\054\017\040\020\051\024" +
    "\041\025\047\027\052\041\053\045\055\050\037\052\043" +
    "\053\042\054\044\056\050\001\002\000\004\056\116\001" +
    "\002\000\036\007\045\012\054\017\040\020\051\024\041" +
    "\025\047\027\052\041\053\045\055\050\037\052\043\053" +
    "\042\054\044\056\050\001\002\000\026\030\063\032\061" +
    "\033\065\034\057\035\060\036\062\037\070\040\064\046" +
    "\066\047\067\001\002\000\036\007\045\012\054\017\040" +
    "\020\051\024\041\025\047\027\052\041\053\045\055\050" +
    "\037\052\043\053\042\054\044\056\050\001\002\000\036" +
    "\007\045\012\054\017\040\020\051\024\041\025\047\027" +
    "\052\041\053\045\055\050\037\052\043\053\042\054\044" +
    "\056\050\001\002\000\036\007\045\012\054\017\040\020" +
    "\051\024\041\025\047\027\052\041\053\045\055\050\037" +
    "\052\043\053\042\054\044\056\050\001\002\000\036\007" +
    "\045\012\054\017\040\020\051\024\041\025\047\027\052" +
    "\041\053\045\055\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\036\007\045\012\054\017\040\020\051" +
    "\024\041\025\047\027\052\041\053\045\055\050\037\052" +
    "\043\053\042\054\044\056\050\001\002\000\004\056\106" +
    "\001\002\000\036\007\045\012\054\017\040\020\051\024" +
    "\041\025\047\027\052\041\053\045\055\050\037\052\043" +
    "\053\042\054\044\056\050\001\002\000\052\005\uffdb\006" +
    "\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb\022\uffdb\030\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\051\uffdb\001\002" +
    "\000\004\055\072\001\002\000\036\007\045\012\054\017" +
    "\040\020\051\024\041\025\047\027\052\041\053\045\055" +
    "\050\037\052\043\053\042\054\044\056\050\001\002\000" +
    "\044\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\022\uffdf\032\061\033\065\034\057\035\060\040\064\042" +
    "\uffdf\043\uffdf\046\uffdf\047\067\051\uffdf\001\002\000\004" +
    "\040\073\001\002\000\004\056\074\001\002\000\004\045" +
    "\076\001\002\000\052\005\uffee\006\uffee\010\uffee\014\uffee" +
    "\015\uffee\016\uffee\022\uffee\030\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee" +
    "\046\uffee\047\uffee\051\uffee\001\002\000\040\007\045\012" +
    "\054\017\040\020\051\024\041\025\047\027\052\041\053" +
    "\045\055\046\101\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\006\042\102\046\103\001\002\000\030" +
    "\030\063\032\061\033\065\034\057\035\060\036\062\037" +
    "\070\040\064\042\uffd4\046\uffd4\047\067\001\002\000\052" +
    "\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016\uffd6\022" +
    "\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6\051" +
    "\uffd6\001\002\000\036\007\045\012\054\017\040\020\051" +
    "\024\041\025\047\027\052\041\053\045\055\050\037\052" +
    "\043\053\042\054\044\056\050\001\002\000\052\005\uffd5" +
    "\006\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\022\uffd5\030" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\051\uffd5\001" +
    "\002\000\030\030\063\032\061\033\065\034\057\035\060" +
    "\036\062\037\070\040\064\042\uffd3\046\uffd3\047\067\001" +
    "\002\000\052\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\022\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\064\042\uffe1\043\uffe1\046\uffe1" +
    "\047\067\051\uffe1\001\002\000\004\045\076\001\002\000" +
    "\052\005\uffed\006\uffed\010\uffed\014\uffed\015\uffed\016\uffed" +
    "\022\uffed\030\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\042\uffed\043\uffed\046\uffed\047\uffed" +
    "\051\uffed\001\002\000\044\005\uffde\006\uffde\010\uffde\014" +
    "\uffde\015\uffde\016\uffde\022\uffde\032\061\033\065\034\057" +
    "\035\060\040\064\042\uffde\043\uffde\046\uffde\047\067\051" +
    "\uffde\001\002\000\044\005\uffdd\006\uffdd\010\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\022\uffdd\032\061\033\065\034\057\035" +
    "\060\040\064\042\uffdd\043\uffdd\046\uffdd\047\067\051\uffdd" +
    "\001\002\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\022\uffe4\030\uffe4\032\uffe4\033\065\034\uffe4" +
    "\035\060\036\uffe4\037\uffe4\040\064\042\uffe4\043\uffe4\046" +
    "\uffe4\047\067\051\uffe4\001\002\000\052\005\uffe2\006\uffe2" +
    "\010\uffe2\014\uffe2\015\uffe2\016\uffe2\022\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\064" +
    "\042\uffe2\043\uffe2\046\uffe2\047\067\051\uffe2\001\002\000" +
    "\052\005\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\022\uffe3\030\uffe3\032\uffe3\033\065\034\uffe3\035\060\036" +
    "\uffe3\037\uffe3\040\064\042\uffe3\043\uffe3\046\uffe3\047\067" +
    "\051\uffe3\001\002\000\052\005\uffe8\006\uffe8\010\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\022\uffe8\030\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043" +
    "\uffe8\046\uffe8\047\uffe8\051\uffe8\001\002\000\004\044\117" +
    "\001\002\000\004\055\120\001\002\000\010\010\122\026" +
    "\123\042\121\001\002\000\004\056\116\001\002\000\036" +
    "\007\045\012\054\017\040\020\051\024\041\025\047\027" +
    "\052\041\053\045\055\050\037\052\043\053\042\054\044" +
    "\056\050\001\002\000\036\007\045\012\054\017\040\020" +
    "\051\024\041\025\047\027\052\041\053\045\055\050\037" +
    "\052\043\053\042\054\044\056\050\001\002\000\030\010" +
    "\125\030\063\032\061\033\065\034\057\035\060\036\062" +
    "\037\070\040\064\042\126\047\067\001\002\000\036\007" +
    "\045\012\054\017\040\020\051\024\041\025\047\027\052" +
    "\041\053\045\055\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\004\056\116\001\002\000\052\005\uffcd" +
    "\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022\uffcd\030" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\051\uffcd\001" +
    "\002\000\052\005\uffcf\006\uffcf\010\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\022\uffcf\030\063\032\061\033\065\034\057\035" +
    "\060\036\062\037\070\040\064\042\uffcf\043\uffcf\046\uffcf" +
    "\047\067\051\uffcf\001\002\000\052\005\uffd0\006\uffd0\010" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\022\uffd0\030\063\032\061" +
    "\033\065\034\057\035\060\036\062\037\070\040\064\042" +
    "\uffd0\043\uffd0\046\uffd0\047\067\051\uffd0\001\002\000\052" +
    "\005\uffce\006\uffce\010\uffce\014\uffce\015\uffce\016\uffce\022" +
    "\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\042\uffce\043\uffce\046\uffce\047\uffce\051" +
    "\uffce\001\002\000\052\005\uffe0\006\uffe0\010\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\022\uffe0\030\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\064\042\uffe0\043\uffe0" +
    "\046\uffe0\047\067\051\uffe0\001\002\000\052\005\uffdc\006" +
    "\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc\030\063" +
    "\032\061\033\065\034\057\035\060\036\062\037\070\040" +
    "\064\042\uffdc\043\uffdc\046\uffdc\047\067\051\uffdc\001\002" +
    "\000\026\022\136\030\063\032\061\033\065\034\057\035" +
    "\060\036\062\037\070\040\064\047\067\001\002\000\004" +
    "\056\140\001\002\000\006\021\147\056\146\001\002\000" +
    "\004\044\141\001\002\000\004\055\142\001\002\000\004" +
    "\023\143\001\002\000\036\007\045\012\054\017\040\020" +
    "\051\024\041\025\047\027\052\041\053\045\055\050\037" +
    "\052\043\053\042\054\044\056\050\001\002\000\026\030" +
    "\063\032\061\033\065\034\057\035\060\036\062\037\070" +
    "\040\064\043\145\047\067\001\002\000\006\021\uffd2\056" +
    "\uffd2\001\002\000\004\044\150\001\002\000\052\005\uffe7" +
    "\006\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\022\uffe7\030" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\051\uffe7\001" +
    "\002\000\004\055\151\001\002\000\004\023\152\001\002" +
    "\000\036\007\045\012\054\017\040\020\051\024\041\025" +
    "\047\027\052\041\053\045\055\050\037\052\043\053\042" +
    "\054\044\056\050\001\002\000\026\030\063\032\061\033" +
    "\065\034\057\035\060\036\062\037\070\040\064\043\154" +
    "\047\067\001\002\000\006\021\uffd1\056\uffd1\001\002\000" +
    "\052\005\uffec\006\uffec\010\uffec\014\uffec\015\uffec\016\uffec" +
    "\022\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\uffec\046\uffec\047\uffec" +
    "\051\uffec\001\002\000\036\007\045\012\054\017\040\020" +
    "\051\024\041\025\047\027\052\041\053\045\055\050\037" +
    "\052\043\053\042\054\044\056\050\001\002\000\052\005" +
    "\uffef\006\uffef\010\uffef\014\uffef\015\uffef\016\uffef\022\uffef" +
    "\030\063\032\061\033\065\034\057\035\060\036\062\037" +
    "\070\040\064\042\uffef\043\uffef\046\uffef\047\067\051\uffef" +
    "\001\002\000\052\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\064\042\uffe5\043\uffe5\046" +
    "\uffe5\047\067\051\uffe5\001\002\000\004\043\162\001\002" +
    "\000\006\051\ufff4\056\ufff4\001\002\000\026\016\164\030" +
    "\063\032\061\033\065\034\057\035\060\036\062\037\070" +
    "\040\064\047\067\001\002\000\036\007\045\012\054\017" +
    "\040\020\051\024\041\025\047\027\052\041\053\045\055" +
    "\050\037\052\043\053\042\054\044\056\050\001\002\000" +
    "\026\005\166\030\063\032\061\033\065\034\057\035\060" +
    "\036\062\037\070\040\064\047\067\001\002\000\036\007" +
    "\045\012\054\017\040\020\051\024\041\025\047\027\052" +
    "\041\053\045\055\050\037\052\043\053\042\054\044\056" +
    "\050\001\002\000\026\006\170\030\063\032\061\033\065" +
    "\034\057\035\060\036\062\037\070\040\064\047\067\001" +
    "\002\000\052\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\022\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb" +
    "\047\uffeb\051\uffeb\001\002\000\052\005\uffe6\006\uffe6\010" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042" +
    "\uffe6\043\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002\000\026" +
    "\014\173\030\063\032\061\033\065\034\057\035\060\036" +
    "\062\037\070\040\064\047\067\001\002\000\036\007\045" +
    "\012\054\017\040\020\051\024\041\025\047\027\052\041" +
    "\053\045\055\050\037\052\043\053\042\054\044\056\050" +
    "\001\002\000\026\015\175\030\063\032\061\033\065\034" +
    "\057\035\060\036\062\037\070\040\064\047\067\001\002" +
    "\000\052\005\uffea\006\uffea\010\uffea\014\uffea\015\uffea\016" +
    "\uffea\022\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\042\uffea\043\uffea\046\uffea\047" +
    "\uffea\051\uffea\001\002\000\040\007\045\012\054\017\040" +
    "\020\051\024\041\025\047\027\052\041\053\045\055\050" +
    "\037\051\202\052\043\053\042\054\044\056\050\001\002" +
    "\000\026\030\063\032\061\033\065\034\057\035\060\036" +
    "\062\037\070\040\064\043\200\047\067\001\002\000\040" +
    "\007\uffcc\012\uffcc\017\uffcc\020\uffcc\024\uffcc\025\uffcc\027" +
    "\uffcc\041\uffcc\045\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\056\uffcc\001\002\000\026\030\063\032\061\033" +
    "\065\034\057\035\060\036\062\037\070\040\064\043\203" +
    "\047\067\001\002\000\052\005\uffe9\006\uffe9\010\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043" +
    "\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002\000\040\007\uffcb" +
    "\012\uffcb\017\uffcb\020\uffcb\024\uffcb\025\uffcb\027\uffcb\041" +
    "\uffcb\045\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\001\002\000\006\042\ufff1\046\ufff1\001\002\000" +
    "\004\055\206\001\002\000\006\042\ufff0\046\ufff0\001\002" +
    "\000\006\026\211\043\210\001\002\000\006\051\ufff6\056" +
    "\ufff6\001\002\000\036\007\045\012\054\017\040\020\051" +
    "\024\041\025\047\027\052\041\053\045\055\050\037\052" +
    "\043\053\042\054\044\056\050\001\002\000\026\030\063" +
    "\032\061\033\065\034\057\035\060\036\062\037\070\040" +
    "\064\043\213\047\067\001\002\000\006\051\ufff5\056\ufff5" +
    "\001\002\000\006\051\ufff7\056\ufff7\001\002\000\004\043" +
    "\ufff9\001\002\000\004\002\000\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\010\002\004\003\003\004\007\001\001\000" +
    "\004\004\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\013\001" +
    "\001\000\006\005\021\007\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\030\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\045\001\001\000\006\012" +
    "\176\015\175\001\001\000\004\012\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\162\001\001\000\002\001\001\000\004" +
    "\012\157\001\001\000\004\016\154\001\001\000\004\012" +
    "\134\001\001\000\004\012\133\001\001\000\004\012\132" +
    "\001\001\000\004\013\114\001\001\000\004\012\055\001" +
    "\001\000\002\001\001\000\004\012\113\001\001\000\004" +
    "\012\112\001\001\000\004\012\111\001\001\000\004\012" +
    "\110\001\001\000\004\012\107\001\001\000\002\001\001" +
    "\000\004\012\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\074\001\001\000" +
    "\002\001\001\000\006\012\077\014\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\131" +
    "\001\001\000\004\012\130\001\001\000\004\012\123\001" +
    "\001\000\002\001\001\000\004\012\127\001\001\000\004" +
    "\013\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\164\001\001\000\002\001\001\000\004\012\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CoolParser$actions {



    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action_part00000000(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              programc RESULT =null;
		 RESULT = new programc(curr_lineno(),
	                          new Classes(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= clase 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list clase 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clase ::= CLASS TYPEID reduccion_dummy SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new class_c(curr_lineno(), n,
		                    AbstractTable.idtable.addString("Object"), f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("clase",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clase ::= CLASS TYPEID INHERITS TYPEID reduccion_dummy SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new class_c(curr_lineno(),
	                         n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("clase",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reduccion_dummy ::= LBRACE RBRACE 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("reduccion_dummy",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reduccion_dummy ::= LBRACE dummy_feature_list RBRACE 
            {
              Features RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features df = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = df; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("reduccion_dummy",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dummy_feature_list ::= contenido_clase 
            {
              Features RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Feature p = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(p); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dummy_feature_list ::= dummy_feature_list contenido_clase 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Feature p = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = f.appendElement(p); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido_clase ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_clase",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido_clase ::= OBJECTID COLON TYPEID ASSIGN expresion SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_clase",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido_clase ::= OBJECTID LPAREN parametro RPAREN COLON TYPEID LBRACE expresion RBRACE SEMI 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).right;
		Formals p = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), o, p, t, ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_clase",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro ::= contenido_parametro 
            {
              Formals RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc cp = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(cp); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= parametro COMMA contenido_parametro 
            {
              Formals RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Formals p = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc cp = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = p.appendElement(cp); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenido_parametro ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_parametro",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= OBJECTID ASSIGN expresion 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), o, ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion AT TYPEID DOT OBJECTID reduce_expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expressions re = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new static_dispatch(curr_lineno(), ex, t, o, re); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion DOT OBJECTID reduce_expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expressions re = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new dispatch(curr_lineno(), ex, o, re); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= OBJECTID reduce_expresion 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expressions re = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 AbstractSymbol aS=AbstractTable.idtable.addString("self");
	                                                                                    RESULT = new dispatch(curr_lineno(),new object(curr_lineno(),aS),o,re); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= IF expresion THEN expresion ELSE expresion FI 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), ex, ex1, ex2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= WHILE expresion LOOP expresion POOL 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= LBRACE expresion_bloque RBRACE 
            {
              Expression RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions eb = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), eb); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= LET contenido_let 
            {
              Expression RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let cl = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= CASE expresion OF contenido_case ESAC 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Cases cc = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(),ex,cc); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), t); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= ISVOID expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion PLUS expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MINUS expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MULT expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion DIV expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= NEG expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion LT expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion LE expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion EQ expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= NOT expresion 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= LPAREN expresion RPAREN 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = ex; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= OBJECTID 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= INT_CONST 
            {
              Expression RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol ic = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), ic); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= STR_CONST 
            {
              Expression RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol sc = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), sc); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Boolean bc = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), bc); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reduce_expresion ::= LPAREN RPAREN 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("reduce_expresion",12, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reduce_expresion ::= LPAREN repitencia_expresion RPAREN 
            {
              Expressions RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions re = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = re; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("reduce_expresion",12, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // repitencia_expresion ::= expresion 
            {
              Expressions RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("repitencia_expresion",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // repitencia_expresion ::= repitencia_expresion COMMA expresion 
            {
              Expressions RESULT =null;
		int rexleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int rexright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions rex = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = rex.appendElement(ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("repitencia_expresion",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenido_case ::= OBJECTID COLON TYPEID DARROW expresion SEMI 
            {
              Cases RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(new branch(curr_lineno(), o, t, ex)); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_case",13, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenido_case ::= contenido_case OBJECTID COLON TYPEID DARROW expresion SEMI 
            {
              Cases RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		Cases cc = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = cc.appendElement(new branch(curr_lineno(), o, t, ex)); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_case",13, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenido_let ::= OBJECTID COLON TYPEID IN expresion 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t,new no_expr(curr_lineno()), ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_let",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenido_let ::= OBJECTID COLON TYPEID ASSIGN expresion IN expresion 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression ex1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t, ex, ex1); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_let",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenido_let ::= OBJECTID COLON TYPEID COMMA contenido_let 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let cl = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_let",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenido_let ::= OBJECTID COLON TYPEID ASSIGN expresion COMMA contenido_let 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let cl = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t, ex, cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("contenido_let",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_bloque ::= expresion SEMI 
            {
              Expressions RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion_bloque",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_bloque ::= expresion_bloque expresion SEMI 
            {
              Expressions RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions eb = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = eb.appendElement(ex); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expresion_bloque",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CoolParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
              return CUP$CoolParser$do_action_part00000000(
                               CUP$CoolParser$act_num,
                               CUP$CoolParser$parser,
                               CUP$CoolParser$stack,
                               CUP$CoolParser$top);
    }
}

}
